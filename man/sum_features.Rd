% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculation-functions.R
\name{sum_features}
\alias{sum_features}
\title{Sum features by metabolite group}
\usage{
sum_features(Peak.list, Sample.df, search.par, QC.id, BLANK, IonMode)
}
\arguments{
\item{Peak.list}{data frame. Must have column \code{metabolite_group}.
Should contain output columns from XCMS and CAMERA. Can contain columns
from functions \code{match_Annotation, calc_minfrac, ParseCAMERA,
plot_metgroup}.}

\item{Sample.df}{a data frame with class info as columns.  Must contain a
separate row entry for each unique sex/class combination. Must contain the
columns \code{"Sex","Class","n","Endogenous"}.}

\item{search.par}{a single-row data frame with 11 variables containing
user-defined search parameters. Must contain the columns
\code{"ppm","rt","Voidrt","Corr.stat.pos","Corr.stat.neg","CV","Minfrac","Endogenous","Solvent","gen.plots","keep.singletons"}.}

\item{QC.id}{character vector specifying identifier in filename designating a
Pooled QC sample.  Only the first value will be used.  Default is
\code{"Pooled_QC_"}}

\item{BLANK}{a logical indicating whether blanks are being evaluated}

\item{IonMode}{a character string defining the ionization mode.  Must be
either 'Positive' or 'Negative'}
}
\value{
sum.range.list with the first column containing metabolite group and
  the rest containing sample and QC columns
}
\description{
Sums all features belonging to the same metabolite into a single
  intensity value per metabolite group per sample
}
\examples{
library(LUMA)
file <- system.file('extdata/Search_Parameters.txt', package = "LUMA")
search.par <- read.table(file, sep = "\t", header = TRUE) #Ignore Warning message
file2 <- system.file('extdata/Sample_Class.txt', package = "LUMA")
Sample.df <- read.table(file2, sep = "\t", header = TRUE) #Ignore Warning message
Peak.list <- LUMA::Peaklist_Pos$output_parsed
if("metabolite_group" \%in\% colnames(Peak.list)) {
  test <- sum_features(Peak.list = Peak.list, Sample.df = Sample.df ,
                       search.par = search.par, BLANK = FALSE, IonMode = "Positive")
} else (stop("Peak.list must have a column called \"metabolite_group\""))
\dontrun{
Peak.list <- LUMA::Peaklist_Pos$Annotated
if("metabolite_group" \%in\% colnames(Peak.list)) {
  test <- sum_features(Peak.list = Peak.list, Sample.df = Sample.df ,
                       search.par = search.par, BLANK = FALSE, IonMode = "Positive")
} else (stop("Peak.list must have a column called \"metabolite_group\""))
}
}
